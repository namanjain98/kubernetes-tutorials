#Just set the env variables:
env:
  - name: APP_Color
    value: pink
#Configmaps
#It is difficult to manage the env data within the query files
#We can take this ino out of that file and manage it centrally

#create configmap directly
#kubectl create configmap config-name --from-literal=APP_color=blue --from-literal=APP_MODE=prod
#Other way is by creating file
kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue 
apiVersion: v1
kind: configMap
metadata:
  name: app-config
data:
  APP_color: blue
  APP_MODE: prod

#use them in the poddefination file or any other file
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels: 
    app: frontend
spec:
  containers:
  - name: nginx-container
    image: nginx
  ports:
    - containerPort: 8080
  envFrom:
    - configMApRef:
        name: app-config
    


#Configure Secrets in application
#kubectl create secret generic secret-name --from-literal=key=value
#kubectl create secret generic secret-name --from-literal=key=value --from-literal=key=value --from-literal=key=value
#kubectl create secret generic app-secret --from-file=app.secret.properties (create secret from file directly)

apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
  db-host: fddf
  db-user: kmkm
  db-password: mmmmm

#convert the data into base64 and than insert
#to decode echo -n 'bX1zxsd' | base64 --decode
#to encode echo -n 'mysql' | base64 --encode
#kubectl get secrets
#kubectl describe secrets  
#kubectl get secret app-secret -o yaml

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels: 
    app: frontend
spec:
  containers:
  - name: nginx-container
    image: nginx
  ports:
    - containerPort: 8080
  envFrom:
    - configMApRef:
        name: app-secret

#Secret as pods as volume
#Each secret is 
volumes:  
- name: app-secret-volume
  secret:
    secretName: app-secret